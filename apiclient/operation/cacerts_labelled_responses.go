// Code generated by go-swagger; DO NOT EDIT.

package operation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// CacertsLabelledReader is a Reader for the CacertsLabelled structure.
type CacertsLabelledReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CacertsLabelledReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCacertsLabelledOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewCacertsLabelledNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCacertsLabelledInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCacertsLabelledOK creates a CacertsLabelledOK with default headers values
func NewCacertsLabelledOK() *CacertsLabelledOK {
	var (
		// initialize headers with default values
		contentTransferEncodingDefault = string("base64")

		contentTypeDefault = string("application/pkcs7-mime")
	)

	return &CacertsLabelledOK{

		ContentTransferEncoding: contentTransferEncodingDefault,
		ContentType:             contentTypeDefault,
	}
}

/* CacertsLabelledOK describes a response with status code 200, with default header values.

successful operation
*/
type CacertsLabelledOK struct {
	ContentTransferEncoding string
	ContentType             string

	Payload string
}

func (o *CacertsLabelledOK) Error() string {
	return fmt.Sprintf("[GET /{label}/cacerts][%d] cacertsLabelledOK  %+v", 200, o.Payload)
}
func (o *CacertsLabelledOK) GetPayload() string {
	return o.Payload
}

func (o *CacertsLabelledOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Transfer-Encoding
	hdrContentTransferEncoding := response.GetHeader("Content-Transfer-Encoding")

	if hdrContentTransferEncoding != "" {
		o.ContentTransferEncoding = hdrContentTransferEncoding
	}

	// hydrates response header Content-Type
	hdrContentType := response.GetHeader("Content-Type")

	if hdrContentType != "" {
		o.ContentType = hdrContentType
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCacertsLabelledNotFound creates a CacertsLabelledNotFound with default headers values
func NewCacertsLabelledNotFound() *CacertsLabelledNotFound {
	return &CacertsLabelledNotFound{}
}

/* CacertsLabelledNotFound describes a response with status code 404, with default header values.

CA not found
*/
type CacertsLabelledNotFound struct {
	Payload string
}

func (o *CacertsLabelledNotFound) Error() string {
	return fmt.Sprintf("[GET /{label}/cacerts][%d] cacertsLabelledNotFound  %+v", 404, o.Payload)
}
func (o *CacertsLabelledNotFound) GetPayload() string {
	return o.Payload
}

func (o *CacertsLabelledNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCacertsLabelledInternalServerError creates a CacertsLabelledInternalServerError with default headers values
func NewCacertsLabelledInternalServerError() *CacertsLabelledInternalServerError {
	return &CacertsLabelledInternalServerError{}
}

/* CacertsLabelledInternalServerError describes a response with status code 500, with default header values.

something went wrong
*/
type CacertsLabelledInternalServerError struct {
	Payload string
}

func (o *CacertsLabelledInternalServerError) Error() string {
	return fmt.Sprintf("[GET /{label}/cacerts][%d] cacertsLabelledInternalServerError  %+v", 500, o.Payload)
}
func (o *CacertsLabelledInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *CacertsLabelledInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
