// Code generated by go-swagger; DO NOT EDIT.

package operation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// SimpleenrollLabelledReader is a Reader for the SimpleenrollLabelled structure.
type SimpleenrollLabelledReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SimpleenrollLabelledReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSimpleenrollLabelledOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSimpleenrollLabelledBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSimpleenrollLabelledUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSimpleenrollLabelledNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSimpleenrollLabelledInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSimpleenrollLabelledOK creates a SimpleenrollLabelledOK with default headers values
func NewSimpleenrollLabelledOK() *SimpleenrollLabelledOK {
	var (
		// initialize headers with default values
		contentTransferEncodingDefault = string("base64")

		contentTypeDefault = string("application/pkcs7-mime")
	)

	return &SimpleenrollLabelledOK{

		ContentTransferEncoding: contentTransferEncodingDefault,
		ContentType:             contentTypeDefault,
	}
}

/* SimpleenrollLabelledOK describes a response with status code 200, with default header values.

successful operation
*/
type SimpleenrollLabelledOK struct {
	ContentTransferEncoding string
	ContentType             string

	Payload string
}

func (o *SimpleenrollLabelledOK) Error() string {
	return fmt.Sprintf("[POST /{label}/simpleenroll][%d] simpleenrollLabelledOK  %+v", 200, o.Payload)
}
func (o *SimpleenrollLabelledOK) GetPayload() string {
	return o.Payload
}

func (o *SimpleenrollLabelledOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Transfer-Encoding
	hdrContentTransferEncoding := response.GetHeader("Content-Transfer-Encoding")

	if hdrContentTransferEncoding != "" {
		o.ContentTransferEncoding = hdrContentTransferEncoding
	}

	// hydrates response header Content-Type
	hdrContentType := response.GetHeader("Content-Type")

	if hdrContentType != "" {
		o.ContentType = hdrContentType
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSimpleenrollLabelledBadRequest creates a SimpleenrollLabelledBadRequest with default headers values
func NewSimpleenrollLabelledBadRequest() *SimpleenrollLabelledBadRequest {
	return &SimpleenrollLabelledBadRequest{}
}

/* SimpleenrollLabelledBadRequest describes a response with status code 400, with default header values.

invalid request
*/
type SimpleenrollLabelledBadRequest struct {
	Payload string
}

func (o *SimpleenrollLabelledBadRequest) Error() string {
	return fmt.Sprintf("[POST /{label}/simpleenroll][%d] simpleenrollLabelledBadRequest  %+v", 400, o.Payload)
}
func (o *SimpleenrollLabelledBadRequest) GetPayload() string {
	return o.Payload
}

func (o *SimpleenrollLabelledBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSimpleenrollLabelledUnauthorized creates a SimpleenrollLabelledUnauthorized with default headers values
func NewSimpleenrollLabelledUnauthorized() *SimpleenrollLabelledUnauthorized {
	return &SimpleenrollLabelledUnauthorized{}
}

/* SimpleenrollLabelledUnauthorized describes a response with status code 401, with default header values.

Authentication information is missing or invalid
*/
type SimpleenrollLabelledUnauthorized struct {
	WWWAuthenticate string
}

func (o *SimpleenrollLabelledUnauthorized) Error() string {
	return fmt.Sprintf("[POST /{label}/simpleenroll][%d] simpleenrollLabelledUnauthorized ", 401)
}

func (o *SimpleenrollLabelledUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header WWW_Authenticate
	hdrWWWAuthenticate := response.GetHeader("WWW_Authenticate")

	if hdrWWWAuthenticate != "" {
		o.WWWAuthenticate = hdrWWWAuthenticate
	}

	return nil
}

// NewSimpleenrollLabelledNotFound creates a SimpleenrollLabelledNotFound with default headers values
func NewSimpleenrollLabelledNotFound() *SimpleenrollLabelledNotFound {
	return &SimpleenrollLabelledNotFound{}
}

/* SimpleenrollLabelledNotFound describes a response with status code 404, with default header values.

CA not found
*/
type SimpleenrollLabelledNotFound struct {
	Payload string
}

func (o *SimpleenrollLabelledNotFound) Error() string {
	return fmt.Sprintf("[POST /{label}/simpleenroll][%d] simpleenrollLabelledNotFound  %+v", 404, o.Payload)
}
func (o *SimpleenrollLabelledNotFound) GetPayload() string {
	return o.Payload
}

func (o *SimpleenrollLabelledNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSimpleenrollLabelledInternalServerError creates a SimpleenrollLabelledInternalServerError with default headers values
func NewSimpleenrollLabelledInternalServerError() *SimpleenrollLabelledInternalServerError {
	return &SimpleenrollLabelledInternalServerError{}
}

/* SimpleenrollLabelledInternalServerError describes a response with status code 500, with default header values.

something went wrong
*/
type SimpleenrollLabelledInternalServerError struct {
	Payload string
}

func (o *SimpleenrollLabelledInternalServerError) Error() string {
	return fmt.Sprintf("[POST /{label}/simpleenroll][%d] simpleenrollLabelledInternalServerError  %+v", 500, o.Payload)
}
func (o *SimpleenrollLabelledInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *SimpleenrollLabelledInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
